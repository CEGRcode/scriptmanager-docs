"use strict";(self.webpackChunkscriptmanager_docs=self.webpackChunkscriptmanager_docs||[]).push([[7013],{56:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/BAMtobedGraphWindow-9476d8af030c3aceb1697ddb02b4da2b.png"},2697:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/BAMtobedGraph_square-9da0604bf5d36afdd2cd3f584bb78229.svg"},5680:(e,t,a)=>{a.d(t,{xA:()=>g,yg:()=>y});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},g=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),m=d(a),s=r,y=m["".concat(p,".").concat(s)]||m[s]||u[s]||o;return a?n.createElement(y,l(l({ref:t},g),{},{components:a})):n.createElement(y,l({ref:t},g))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},7874:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var n=a(8168),r=(a(6540),a(5680));const o={id:"bam-to-bedgraph",title:"BAM to bedGraph",sidebar_label:"BAM to bedGraph"},l=void 0,i={unversionedId:"Tools/bam-format-converter/bam-to-bedgraph",id:"Tools/bam-format-converter/bam-to-bedgraph",title:"BAM to bedGraph",description:"bam-to-bedgraph",source:"@site/docs/Tools/bam-format-converter/bam-to-bedgraph.md",sourceDirName:"Tools/bam-format-converter",slug:"/Tools/bam-format-converter/bam-to-bedgraph",permalink:"/scriptmanager-docs/docs/Tools/bam-format-converter/bam-to-bedgraph",draft:!1,tags:[],version:"current",lastUpdatedBy:"Olivia Wen-Mei Lang",lastUpdatedAt:1724193973,formattedLastUpdatedAt:"Aug 20, 2024",frontMatter:{id:"bam-to-bedgraph",title:"BAM to bedGraph",sidebar_label:"BAM to bedGraph"},sidebar:"toolSidebar",previous:{title:"BAM to BED",permalink:"/scriptmanager-docs/docs/Tools/bam-format-converter/bam-to-bed"},next:{title:"BAM to GFF",permalink:"/scriptmanager-docs/docs/Tools/bam-format-converter/bam-to-gff"}},p={},d=[{value:"Read Options",id:"read-options",level:3},{value:"Command Line Interface",id:"command-line-interface",level:2},{value:"Positional Input",id:"positional-input",level:3},{value:"Output Options",id:"output-options",level:3},{value:"Filter Options",id:"filter-options",level:3},{value:"Read Options",id:"read-options-1",level:3}],g={toc:d},m="wrapper";function u(e){let{components:t,...o}=e;return(0,r.yg)(m,(0,n.A)({},g,o,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"bam-to-bedgraph",src:a(2697).A,width:"103",height:"103"})),(0,r.yg)("p",null,"Convert BAM file to bedGraph file"),(0,r.yg)("img",{src:a(56).A,style:{width:"70%"}}),(0,r.yg)("h3",{id:"read-options"},"Read Options"),(0,r.yg)("p",null,"This tool has multiple read options to output."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Read 1"),": output Read 1"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Read 2"),": output Read 2"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Combined"),": output combined reads"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Midpoint"),": output the midpoint between reads")),(0,r.yg)("p",null,"Note: The ",(0,r.yg)("strong",{parentName:"p"},"Midpoint")," option requires proper mate-pair reading."),(0,r.yg)("h2",{id:"command-line-interface"},"Command Line Interface"),(0,r.yg)("p",null,"Usage:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},"java -jar ScriptManager.jar bam-format-converter bam-to-bedgraph [-1 | -2 | -a | -m]\n[-hpV] [-n=<MIN_INSERT>] [-o=<outputBasename>] [-x=<MAX_INSERT>]\n<bamFile>\n")),(0,r.yg)("h3",{id:"positional-input"},"Positional Input"),(0,r.yg)("p",null,"This tool takes a single BAM file for input. As with other tools, this tool requires the BAM file be indexed."),(0,r.yg)("h3",{id:"output-options"},"Output Options"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Option"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-o, --output=<outputBasename>")),(0,r.yg)("td",{parentName:"tr",align:null},"specify output directory (name will be same as original with ",(0,r.yg)("inlineCode",{parentName:"td"},"_<strand>.bedgraph")," ext)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-s, --stdout")),(0,r.yg)("td",{parentName:"tr",align:null},"stream output file to STDOUT (cannot be used with ",(0,r.yg)("inlineCode",{parentName:"td"},"-o")," flag)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-z, --gzip")),(0,r.yg)("td",{parentName:"tr",align:null},"gzip output (default=false)")))),(0,r.yg)("h3",{id:"filter-options"},"Filter Options"),(0,r.yg)("p",null,"These filter options are shared across all the BAM Format Converter tools."),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Option"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-p, --mate-pair")),(0,r.yg)("td",{parentName:"tr",align:null},"require proper mate pair (default not required)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-n, --min-insert=<MIN_INSERT>")),(0,r.yg)("td",{parentName:"tr",align:null},"filter by min insert size in bp")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-x, --max-insert=<MAX_INSERT>")),(0,r.yg)("td",{parentName:"tr",align:null},"filter by max insert size in bp")))),(0,r.yg)("h3",{id:"read-options-1"},"Read Options"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Option"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-1, --read1")),(0,r.yg)("td",{parentName:"tr",align:null},"output read 1 (default)")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-2, --read2")),(0,r.yg)("td",{parentName:"tr",align:null},"output read 2")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-a, --all-reads")),(0,r.yg)("td",{parentName:"tr",align:null},"output combined")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"-m, --midpoint")),(0,r.yg)("td",{parentName:"tr",align:null},"output midpoint (require PE)")))))}u.isMDXComponent=!0}}]);