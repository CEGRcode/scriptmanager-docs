"use strict";(self.webpackChunkscriptmanager_docs=self.webpackChunkscriptmanager_docs||[]).push([[347],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=s(a),m=r,f=c["".concat(p,".").concat(m)]||c[m]||u[m]||l;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2664:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={id:"dna-shape-bed",title:"DNA Shape from BED File",sidebar_label:"dna-shape-bed"},i=void 0,o={unversionedId:"sequence-analysis/dna-shape-bed",id:"sequence-analysis/dna-shape-bed",title:"DNA Shape from BED File",description:"dna-shape-bed",source:"@site/docs/sequence-analysis/dna-shape-bed.md",sourceDirName:"sequence-analysis",slug:"/sequence-analysis/dna-shape-bed",permalink:"/scriptmanager-docs/docs/sequence-analysis/dna-shape-bed",draft:!1,tags:[],version:"current",lastUpdatedBy:"Olivia Wen-Mei Lang",lastUpdatedAt:1674838098,formattedLastUpdatedAt:"Jan 27, 2023",frontMatter:{id:"dna-shape-bed",title:"DNA Shape from BED File",sidebar_label:"dna-shape-bed"},sidebar:"toolSidebar",previous:{title:"search-motif",permalink:"/scriptmanager-docs/docs/sequence-analysis/search-motif"},next:{title:"dna-shape-fasta",permalink:"/scriptmanager-docs/docs/sequence-analysis/dna-shape-fasta"}},p={},s=[{value:"Positional Input",id:"positional-input",level:3},{value:"Output Options",id:"output-options",level:3},{value:"Strand Options",id:"strand-options",level:3},{value:"Shape Options",id:"shape-options",level:3}],d={toc:s},c="wrapper";function u(e){let{components:t,...l}=e;return(0,r.kt)(c,(0,n.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"dna-shape-bed",src:a(3901).Z,width:"103",height:"103"})),(0,r.kt)("p",null,"Calculate intrinsic DNA shape parameters given BED file and Genome FASTA file."),(0,r.kt)("img",{src:a(1114).Z,style:{width:"70%"}}),(0,r.kt)("p",null,"Usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar ScriptManager.jar sequence-analysis dna-shape-bed [-afghlprV]\n[--avg-composite] [-o=<outputBasename>] <genomeFile> <bedFile>\n")),(0,r.kt)("p",null,"Based on Roh's lab DNAshape server data.\nNotes: Sequences with Ns are thrown out.\n",(0,r.kt)("inlineCode",{parentName:"p"},"<genomeFile>"),"      reference genome FASTA file\n",(0,r.kt)("inlineCode",{parentName:"p"},"<bedFile>"),"         the BED file of sequences to extract"),(0,r.kt)("h3",{id:"positional-input"},"Positional Input"),(0,r.kt)("p",null,"Expects a ",(0,r.kt)("a",{parentName:"p",href:"/docs/References/file-formats#fasta"},"FASTA")," formatted file with many sequences to stack up with each other (like ",(0,r.kt)("a",{parentName:"p",href:"/docs/sequence-analysis/fasta-extract"},"fasta-extract tool")," output)."),(0,r.kt)("h3",{id:"output-options"},"Output Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-o, --output=<outputBasename>")),(0,r.kt)("td",{parentName:"tr",align:null},"Specify output basename (files for each shape indicated will share this base)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"--avg-composite")),(0,r.kt)("td",{parentName:"tr",align:null},"Save average composite")))),(0,r.kt)("h3",{id:"strand-options"},"Strand Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-f, --force")),(0,r.kt)("td",{parentName:"tr",align:null},"force-strandedness (default)")))),(0,r.kt)("h3",{id:"shape-options"},"Shape Options"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Option"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-g, --groove")),(0,r.kt)("td",{parentName:"tr",align:null},"output minor groove width")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-r, --roll")),(0,r.kt)("td",{parentName:"tr",align:null},"output roll")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-p, --propeller")),(0,r.kt)("td",{parentName:"tr",align:null},"output propeller twist")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-l, --helical")),(0,r.kt)("td",{parentName:"tr",align:null},"output helical twist")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"-a, --all")),(0,r.kt)("td",{parentName:"tr",align:null},"output groove, roll, propeller twist, and helical twist, equivalent to -grpl.")))),(0,r.kt)("p",null,"For each shape option to calculate indicated by the command, a ",(0,r.kt)("a",{parentName:"p",href:"/docs/References/file-formats#cdt"},"CDT file")," will be generated with an extension indicating the shape  type calculated."),(0,r.kt)("p",null,"If the ",(0,r.kt)("em",{parentName:"p"},"groove")," information is indicated in the command to be used for the output, a file called ",(0,r.kt)("inlineCode",{parentName:"p"},"<outputBasename>_MGW.cdt")," will be generated.\nSimilarly for ",(0,r.kt)("em",{parentName:"p"},"propeller"),", ",(0,r.kt)("em",{parentName:"p"},"helical"),", and ",(0,r.kt)("em",{parentName:"p"},"roll"),", the output matrix ",(0,r.kt)("a",{parentName:"p",href:"/docs/References/file-formats#cdt"},"CDT files")," will be named with the suffixes ",(0,r.kt)("inlineCode",{parentName:"p"},"_PTwist.cdt"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"_HTwist.cdt"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"_Roll.cdt"),", respectively."))}u.isMDXComponent=!0},1114:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/DNAShapefromBEDWindow-1fda68c1031d36235fd048ef1dd45815.png"},3901:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/DNAShapefromBED_square-4e9d2206e7e1d3afad6f783e338aff1f.svg"}}]);